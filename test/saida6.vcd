$date
	Tue Jul 29 20:46:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 8 " counter [7:0] $end
$var reg 32 # expected_result [31:0] $end
$var reg 1 $ rst_n $end
$scope module t $end
$var wire 1 % ack_o $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 1 & wr_en_core_to_mem $end
$var wire 1 ' rd_en_core_to_mem $end
$var wire 32 ( data_i_mem_to_core [31:0] $end
$var wire 32 ) data_core_to_mem [31:0] $end
$var wire 32 * addr_core_to_mem [31:0] $end
$var parameter 96 + MEMORY_FILE $end
$scope module core_processador $end
$var wire 32 , addr_o [31:0] $end
$var wire 1 ! clk $end
$var wire 32 - data_o [31:0] $end
$var wire 1 ' rd_en_o $end
$var wire 1 $ rst_n $end
$var wire 1 & wr_en_o $end
$var wire 5 . write_register [4:0] $end
$var wire 32 / wire_regB [31:0] $end
$var wire 32 0 wire_regA [31:0] $end
$var wire 4 1 wire_alu_op_o [3:0] $end
$var wire 5 2 registradorB [4:0] $end
$var wire 5 3 registradorA [4:0] $end
$var wire 1 4 reg_write $end
$var wire 1 5 pc_write_cond $end
$var wire 1 6 pc_write $end
$var wire 1 7 pc_source $end
$var wire 32 8 pc_MUX [31:0] $end
$var wire 7 9 opCode [6:0] $end
$var wire 32 : mux_saida_ULA [31:0] $end
$var wire 32 ; mux_WriteData [31:0] $end
$var wire 32 < mux_B_to_ULA [31:0] $end
$var wire 32 = mux_A_to_ULA [31:0] $end
$var wire 1 > memory_write $end
$var wire 1 ? memory_to_reg $end
$var wire 1 @ memory_read $end
$var wire 1 A lorD $end
$var wire 1 B is_immediate $end
$var wire 1 C ir_write $end
$var wire 32 D imediato_out [31:0] $end
$var wire 7 E func7 [6:0] $end
$var wire 3 F func3 [2:0] $end
$var wire 32 G data_i [31:0] $end
$var wire 2 H aluop [1:0] $end
$var wire 1 I alu_zero $end
$var wire 2 J alu_src_b [1:0] $end
$var wire 2 K alu_src_a [1:0] $end
$var wire 32 L alu_result [31:0] $end
$var parameter 32 M BOOT_ADDRESS $end
$var reg 32 N PC [31:0] $end
$var reg 32 O PC_OLD [31:0] $end
$var reg 32 P instruction [31:0] $end
$var reg 32 Q regA [31:0] $end
$var reg 32 R regB [31:0] $end
$var reg 32 S reg_Alu_Out [31:0] $end
$var reg 32 T reg_memory_data [31:0] $end
$scope module alu_inst $end
$var wire 32 U ALU_RS1_i [31:0] $end
$var wire 32 V ALU_RS2_i [31:0] $end
$var wire 1 I ALU_ZR_o $end
$var wire 4 W ALU_OP_i [3:0] $end
$var parameter 4 X AND $end
$var parameter 4 Y EQUAL $end
$var parameter 4 Z GREATER_EQUAL $end
$var parameter 4 [ GREATER_EQUAL_U $end
$var parameter 4 \ NOR $end
$var parameter 4 ] OR $end
$var parameter 4 ^ SHIFT_LEFT $end
$var parameter 4 _ SHIFT_RIGHT $end
$var parameter 4 ` SHIFT_RIGHT_A $end
$var parameter 4 a SLT $end
$var parameter 4 b SLT_U $end
$var parameter 4 c SUB $end
$var parameter 4 d SUM $end
$var parameter 4 e XOR $end
$var reg 32 f ALU_RD_o [31:0] $end
$upscope $end
$scope module banco_de_registradores $end
$var wire 5 g RD_ADDR_i [4:0] $end
$var wire 5 h RS1_ADDR_i [4:0] $end
$var wire 32 i RS1_data_o [31:0] $end
$var wire 5 j RS2_ADDR_i [4:0] $end
$var wire 32 k RS2_data_o [31:0] $end
$var wire 1 ! clk $end
$var wire 32 l data_i [31:0] $end
$var wire 1 4 wr_en_i $end
$upscope $end
$scope module controle_alu $end
$var wire 3 m FUNC3_i [2:0] $end
$var wire 7 n FUNC7_i [6:0] $end
$var wire 1 B is_immediate_i $end
$var wire 2 o ALU_CO_i [1:0] $end
$var parameter 2 p ALU $end
$var parameter 2 q BRANCH $end
$var parameter 2 r INVALID $end
$var parameter 2 s LOAD_STORE $end
$var reg 4 t ALU_OP_o [3:0] $end
$upscope $end
$scope module gerador_de_imediatos $end
$var wire 32 u instr_i [31:0] $end
$var parameter 7 v AUIPC_OPCODE $end
$var parameter 7 w BRANCH_OPCODE $end
$var parameter 7 x IMMEDIATE_OPCODE $end
$var parameter 7 y JALR_OPCODE $end
$var parameter 7 z JAL_OPCODE $end
$var parameter 7 { LUI_OPCODE $end
$var parameter 7 | LW_OPCODE $end
$var parameter 7 } SW_OPCODE $end
$var reg 32 ~ imm_o [31:0] $end
$upscope $end
$scope module unidade_de_controle $end
$var wire 1 ! clk $end
$var wire 7 !" instruction_opcode [6:0] $end
$var wire 1 $ rst_n $end
$var parameter 4 "" ALUWB $end
$var parameter 4 #" AUIPC $end
$var parameter 7 $" AUIPCI $end
$var parameter 4 %" BRANCH $end
$var parameter 7 &" BRANCHI $end
$var parameter 4 '" DECODE $end
$var parameter 4 (" EXECUTEI $end
$var parameter 4 )" EXECUTER $end
$var parameter 4 *" FETCH $end
$var parameter 7 +" ITYPE $end
$var parameter 4 ," JAL $end
$var parameter 7 -" JALI $end
$var parameter 4 ." JALR $end
$var parameter 7 /" JALRI $end
$var parameter 4 0" JALR_PC $end
$var parameter 4 1" LUI $end
$var parameter 7 2" LUII $end
$var parameter 7 3" LW $end
$var parameter 4 4" MEMADR $end
$var parameter 4 5" MEMREAD $end
$var parameter 4 6" MEMWB $end
$var parameter 4 7" MEMWRITE $end
$var parameter 7 8" RTYPE $end
$var parameter 7 9" SW $end
$var reg 4 :" actual_state [3:0] $end
$var reg 2 ;" alu_src_a [1:0] $end
$var reg 2 <" alu_src_b [1:0] $end
$var reg 2 =" aluop [1:0] $end
$var reg 1 C ir_write $end
$var reg 1 B is_immediate $end
$var reg 1 A lorD $end
$var reg 1 @ memory_read $end
$var reg 1 ? memory_to_reg $end
$var reg 1 > memory_write $end
$var reg 4 >" next_state [3:0] $end
$var reg 1 7 pc_source $end
$var reg 1 6 pc_write $end
$var reg 1 5 pc_write_cond $end
$var reg 1 4 reg_write $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 1 % ack_o $end
$var wire 32 ?" addr_i [31:0] $end
$var wire 1 ! clk $end
$var wire 32 @" data_i [31:0] $end
$var wire 1 ' rd_en_i $end
$var wire 1 & wr_en_i $end
$var wire 32 A" data_o [31:0] $end
$var parameter 96 B" MEMORY_FILE $end
$var parameter 32 C" MEMORY_SIZE $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000000000 C"
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 B"
b100011 9"
b110011 8"
b101 7"
b100 6"
b11 5"
b10 4"
b11 3"
b110111 2"
b1101 1"
b1110 0"
b1100111 /"
b1011 ."
b1101111 -"
b1001 ,"
b10011 +"
b0 *"
b110 )"
b1000 ("
b1 '"
b1100011 &"
b1010 %"
b10111 $"
b1100 #"
b111 ""
b100011 }
b11 |
b110111 {
b1101111 z
b1100111 y
b10011 x
b1100011 w
b10111 v
b0 s
b11 r
b1 q
b10 p
b1000 e
b10 d
b1010 c
b1111 b
b1110 a
b111 `
b101 _
b100 ^
b1 ]
b1001 \
b1101 [
b1100 Z
b11 Y
b0 X
b0 M
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 +
$end
#0
$dumpvars
b100000000000001011100111 A"
bx @"
b0 ?"
b1 >"
b0 ="
b1 <"
b0 ;"
b0 :"
bx !"
bx ~
bx u
b10 t
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b100 f
b10 W
b100 V
b0 U
bx T
bx S
bx R
bx Q
bx P
bx O
b0 N
b100 L
b0 K
b1 J
0I
b0 H
b100000000000001011100111 G
bx F
bx E
bx D
1C
0B
0A
1@
0?
0>
b0 =
b100 <
bx ;
b100 :
bx 9
b0 8
07
16
05
04
bx 3
bx 2
b10 1
bx 0
bx /
bx .
bx -
b0 ,
b0 *
bx )
b100000000000001011100111 (
1'
0&
1%
0$
b0 #
b0 "
0!
$end
#1000
b1100111 9
b1100111 !"
b0 0
b0 i
b0 3
b0 h
b1000 2
b1000 j
b101 .
b101 g
b0 F
b0 m
b0 E
b0 n
b1000 D
b1000 ~
b100 ;
b100 l
b0 O
b100000000000001011100111 P
b100000000000001011100111 u
b100000000000001011100111 T
b100 S
1!
#2000
0!
#3000
b0 Q
1!
#4000
0!
#5000
b1110 >"
b1000 :
0I
b1000 L
b1000 f
b1000 <
b1000 V
b0 (
b0 G
b0 A"
b100 *
b100 ,
b100 ?"
b100 8
b10 J
b10 <"
b10 K
b10 ;"
0'
0@
0C
06
b100 N
b1 :"
b1 "
1!
1$
#6000
0!
#7000
b1011 >"
b1000 ;
b1000 l
b1 K
b1 ;"
b1000 S
b0 T
b1110 :"
b10 "
1!
#8000
0!
#9000
b111 >"
b100 L
b100 f
b100 <
b100 V
b1 J
b1 <"
b10 K
b10 ;"
1B
17
16
b1011 :"
b11 "
1!
#10000
0!
#11000
b0 >"
xI
bx L
bx f
bx <
bx V
b1000 =
b1000 U
b100 ;
b100 l
bx :
b0 J
b0 <"
b0 K
b0 ;"
0B
14
07
06
b1000 *
b1000 ,
b1000 ?"
b1000 8
b100 S
b111 :"
b1000 N
b100 "
1!
#12000
0!
#13000
b1 >"
b1100 :
0I
b1100 L
b1100 f
b100 <
b100 V
b10100000100011 (
b10100000100011 G
b10100000100011 A"
bx ;
bx l
b1 J
b1 <"
1'
1@
04
1C
16
bx S
b0 :"
b101 "
1!
#14000
0!
#15000
b10 >"
b10000 <
b10000 V
b11000 :
b0 (
b0 G
b0 A"
b11000 L
b11000 f
b1100 ;
b1100 l
b100011 9
b100011 !"
b0 /
b0 k
b0 2
b0 j
b10000 .
b10000 g
b10 F
b10 m
b10000 D
b10000 ~
b10 J
b10 <"
b10 K
b10 ;"
0'
0@
0C
06
b1100 *
b1100 ,
b1100 ?"
b1100 8
b1000 =
b1000 U
b1100 S
b10100000100011 T
b10100000100011 P
b10100000100011 u
b1000 O
b1 :"
b1100 N
b110 "
1!
#16000
0!
#17000
b101 >"
b10000 :
b10000 L
b10000 f
b0 =
b0 U
b11000 ;
b11000 l
b1 K
b1 ;"
b0 T
b0 )
b0 -
b0 @"
b0 R
b11000 S
b10 :"
b111 "
1!
#18000
0!
#19000
b0 >"
b1100 :
b1100 L
b1100 f
b10000 *
b10000 ,
b10000 ?"
b10000 8
b0 <
b0 V
b1100 =
b1100 U
b10000 ;
b10000 l
b0 J
b0 <"
b0 K
b0 ;"
1A
1&
1>
b10000 S
b101 :"
b1000 "
1!
#20000
0!
#21000
b1 >"
b10000 :
b10000 L
b10000 f
bx (
bx G
bx A"
b100 <
b100 V
b1100 *
b1100 ,
b1100 ?"
b1100 8
b1100 ;
b1100 l
b1 J
b1 <"
0A
0&
0>
1'
1@
1C
16
b1100 S
b0 :"
b1001 "
1!
#22000
0!
#23000
b10 >"
b0 <
b0 V
b1100 :
b0 (
b0 G
b0 A"
b1100 L
b1100 f
b10000 ;
b10000 l
bx 9
bx !"
bx 0
bx i
bx 3
bx h
bx /
bx k
bx 2
bx j
bx .
bx g
bx F
bx m
bx E
bx n
b0 D
b0 ~
b10 J
b10 <"
b10 K
b10 ;"
0'
0@
0C
06
b10000 *
b10000 ,
b10000 ?"
b10000 8
b1100 =
b1100 U
b10000 S
bx T
bx P
bx u
b1100 O
b1 :"
b10000 N
1!
#24000
0!
#25000
bx :
xI
bx L
bx f
bx =
bx U
b1100 ;
b1100 l
b1 K
b1 ;"
b0 T
bx )
bx -
bx @"
bx R
bx Q
b1100 S
b10 :"
1!
